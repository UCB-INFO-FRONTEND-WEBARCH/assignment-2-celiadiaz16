[{"/Users/celia/react-lab/src/index.js":"1","/Users/celia/react-lab/src/App.js":"2","/Users/celia/react-lab/src/reportWebVitals.js":"3","/Users/celia/react-lab/src/components/Form.js":"4","/Users/celia/react-lab/src/components/TodoList.js":"5","/Users/celia/react-lab/src/components/Todo.js":"6"},{"size":500,"mtime":1633727598725,"results":"7","hashOfConfig":"8"},{"size":1786,"mtime":1636797443944,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1633727598726,"results":"10","hashOfConfig":"8"},{"size":1176,"mtime":1636794591708,"results":"11","hashOfConfig":"8"},{"size":555,"mtime":1636797349600,"results":"12","hashOfConfig":"8"},{"size":1051,"mtime":1636797619979,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1cjz3uv",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/celia/react-lab/src/index.js",[],["29","30"],"/Users/celia/react-lab/src/App.js",["31"],"import React, { useState, useEffect } from \"react\";\nimport './App.css';\n//Importing Components\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\n\n\nfunction App() {\n  //State stuff\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  //Run ONCE when the app start\n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n  //USE Effect\n  useEffect(() => {\n    const filterHandler = () => {\n      switch(status){\n        case 'completed':\n          setFilteredTodos(todos.filter(todo => todo.completed === true));\n          break;\n        case 'uncompleted':\n          setFilteredTodos(todos.filter(todo => todo.completed === false));\n          break;\n        default:\n          setFilteredTodos(todos);\n          break;\n      }\n    };\n    filterHandler();\n  }, [todos, status]);\n  //Functions\n  \n  //Save to local\n  const saveLocalTodos = () => {\n      localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n  const getLocalTodos = () => {\n    if (localStorage.getItem(\"todos\") === null) {\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <h1><header>\n      <h1>My Todo Tasks </h1>\n      </header> </h1> \n      <Form \n        inputText={inputText} \n        todos={todos} \n        setTodos={setTodos} \n        setInputText={setInputText} \n        setStatus={setStatus}\n      />\n      <TodoList \n        setTodos={setTodos} \n        todos={todos} \n        filteredTodos={filteredTodos}\n        />\n      \n\n    </div>\n  );\n}\nexport default App;\n","/Users/celia/react-lab/src/reportWebVitals.js",[],"/Users/celia/react-lab/src/components/Form.js",[],"/Users/celia/react-lab/src/components/TodoList.js",[],"/Users/celia/react-lab/src/components/Todo.js",["32","33","34","35"],"import React, { useState, setState, Component } from 'react';\nimport ToDoList from './TodoList';\n\nconst Todo = ({text, todo, todos, setTodos }) => {\n    //Events\n    const deleteHandler = () => {\n        setTodos(todos.filter((el) => el.id !== todo.id));\n    };\n    const completeHandler = () => {\n        setTodos(\n            todos.map(item => {\n                if(item.id === todo.id){\n                    return{\n                        ...item, completed: !item.completed,\n                    };\n                }\n                return item;\n            })\n        );\n    };\n    return(\n        <div className=\"todo\">\n            <li className={`todo-item ${todo.completed ? \"completed\" : ''}`}>{text}</li>\n            <button onClick={completeHandler} className=\"complete-btn\">\n                <i className=\"fas fa-check\"></i>\n                </button>\n                <button onClick={deleteHandler} className=\"trash-btn\">\n                <i className=\"fas fa-trash\"></i>\n                </button>\n        </div>\n    );\n}\n\nexport default Todo;",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":39,"column":9,"nodeType":"42","messageId":"43","endLine":39,"endColumn":23},{"ruleId":"40","severity":1,"message":"44","line":1,"column":17,"nodeType":"42","messageId":"43","endLine":1,"endColumn":25},{"ruleId":"40","severity":1,"message":"45","line":1,"column":27,"nodeType":"42","messageId":"43","endLine":1,"endColumn":35},{"ruleId":"40","severity":1,"message":"46","line":1,"column":37,"nodeType":"42","messageId":"43","endLine":1,"endColumn":46},{"ruleId":"40","severity":1,"message":"47","line":2,"column":8,"nodeType":"42","messageId":"43","endLine":2,"endColumn":16},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'saveLocalTodos' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'setState' is defined but never used.","'Component' is defined but never used.","'ToDoList' is defined but never used.","no-global-assign","no-unsafe-negation"]